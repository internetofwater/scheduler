# Copyright 2025 Lincoln Institute of Land Policy
# SPDX-License-Identifier: Apache-2.0

name: "Geoconnex Scheduler E2E Test"
description: "Reusable GitHub Action to run E2E tests for the Dagster build"
# Allow specifying a custom docker image so we can test specific versions
inputs:
  nabu_image:
    required: true
    description: "Docker image to use for Nabu"
runs:
  using: "composite"
  steps:
    # Checkout Scheduler repo if this is NOT the scheduler repo (e.g., called from nabu)
    - name: Checkout Scheduler Repo from main (external caller)
      if: ${{ github.repository != 'internetofwater/scheduler' }}
      uses: actions/checkout@v4
      with:
        repository: internetofwater/scheduler
        ref: main
        path: scheduler

    # Checkout current branch/ref if this IS the scheduler repo (e.g., PR in scheduler)
    - name: Checkout Scheduler Repo with PR ref (internal caller)
      if: ${{ github.repository == 'internetofwater/scheduler' }}
      uses: actions/checkout@v4
      with:
        path: scheduler

    # Normalize path to the scheduler repo
    - name: Move to repo root
      shell: bash
      run: |
        if [ -d scheduler ]; then
          echo "Running from external repo, moving into scheduler/"
          cd scheduler
          # Export new working directory to all subsequent steps
          echo "GITHUB_WORKSPACE=$(pwd)" >> $GITHUB_ENV
        else
          echo "Already in repo root"
        fi

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Start project in dev
      shell: bash
      run: |
        python3 main.py dev --detach --build

    - name: Debug Docker Containers
      shell: bash
      run: docker ps -a

    - name: Check MinIO Logs
      shell: bash
      run: |
        CONTAINER_ID=$(docker ps -q --filter "name=minio")
        if [ -n "$CONTAINER_ID" ]; then
          docker logs $CONTAINER_ID
        else
          echo "MinIO container not found!"
          exit 1
        fi

    - name: Wait for MinIO
      shell: bash
      run: |
        for i in {1..10}; do
          if curl --max-time 10 -fs http://127.0.0.1:9001/minio/health/live; then
            echo "MinIO is up!"
            exit 0
          fi
          echo "Waiting for MinIO to be ready... Attempt $i"
          sleep 2
        done
        echo "Failed to connect to MinIO after 10 attempts."
        exit 1

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install the project
      shell: bash
      run: uv sync

    - name: Run tests that don't require secrets
      shell: bash
      run: |
        echo "Starting tests"
        NABU_IMAGE="${{ inputs.nabu_image }}" uv run pytest -n auto -x -vv --cov-branch --cov-report=xml --cov
        if [ ! -f coverage.xml ]; then
          echo "Coverage report not found!"
          exit 1
        fi
        echo "Absolute path of coverage.xml: $(realpath coverage.xml)"

    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: scheduler-code-coverage-report
        path: coverage.xml
        if-no-files-found: error
