# Copyright 2025 Lincoln Institute of Land Policy
# SPDX-License-Identifier: Apache-2.0

name: "Geoconnex Scheduler E2E Test"
description: "Reusable GitHub Action to run E2E tests for the Dagster build"
# Allow specifying a custom docker image so we can test specific versions
inputs:
  nabu_image:
    required: true
    description: "Docker image to use for Nabu"
runs:
  using: "composite"
  steps:
    # We have to conditionally checkout the repo since there are multiple different scenarios
    #
    # - scheduler runs this on main
    # - scheduler runs this on a PR
    # - nabu runs this
    #
    # If we don't conditionally check out the repo we could check it out twice
    # when testing scheduler in a PR. And if that is the case we should use the parent's
    # checkout and branch, not main.
    # This cannot be accomplished easily with the `actions/checkout` action
    - name: Conditionally Checkout Scheduler Repo
      shell: bash
      run: |
        if [ "$GITHUB_REPOSITORY" != "internetofwater/scheduler" ]; then
          echo "Checking out scheduler repo into root..."
          rm -rf ./* .??* || true
          git clone --depth=1 --branch main https://github.com/internetofwater/scheduler.git .
        else
          echo "Already in internetofwater/scheduler â€” skipping checkout"
        fi

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies and local services
      shell: bash
      # these are ran in parallel to speed up the process
      run: |
        make up & 
        uv sync & 
        wait

    - name: Debug Docker Containers
      shell: bash
      run: docker ps -a

    - name: Check MinIO Logs
      shell: bash
      run: |
        CONTAINER_ID=$(docker ps -q --filter "name=minio")
        if [ -n "$CONTAINER_ID" ]; then
          docker logs $CONTAINER_ID
        else
          echo "MinIO container not found!"
          exit 1
        fi

    - name: Wait for MinIO
      shell: bash
      run: |
        for i in {1..10}; do
          if curl --max-time 10 -fs http://127.0.0.1:9001/minio/health/live; then
            echo "MinIO is up!"
            exit 0
          fi
          echo "Waiting for MinIO to be ready... Attempt $i"
          sleep 2
        done
        echo "Failed to connect to MinIO after 10 attempts."
        exit 1

    - name: Wait for GraphDB Repository Health
      shell: bash
      run: |
        for i in {1..10}; do
          if curl --max-time 10 -fs http://localhost:7200/repositories/iow/health; then
            echo "GraphDB repository 'iow' is healthy!"
            exit 0
          fi
          echo "Waiting for GraphDB 'iow' repo to be ready... Attempt $i"
          sleep 3
        done
        echo "GraphDB 'iow' repository is not healthy after 10 attempts."
        exit 1

    - name: Run tests that don't require secrets
      shell: bash
      run: |
        echo "Starting tests"
        NABU_IMAGE="${{ inputs.nabu_image }}" uv run pytest -n auto -x -vv --cov-branch --cov-report=xml --cov
        if [ ! -f coverage.xml ]; then
          echo "Coverage report not found!"
          exit 1
        fi
        echo "Absolute path of coverage.xml: $(realpath coverage.xml)"

    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: scheduler-code-coverage-report
        path: coverage.xml
        if-no-files-found: error
