# A compose file which spins up
# local versions of services for scheduler
# useful for local dev or
# less optimized deployment to a simplified cloud environment

services:
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - scheduler_minio_data:/data
    networks:
      - headless_gleanerio
      - dagster_network
    env_file: ".env"

  createbuckets:
    # Creates the buckets on minio for the harvester to move assets into
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
       sleep 10;
       /usr/bin/mc alias set myminio http://minio:9000 minio_access_key minio_secret_key;
      /usr/bin/mc mb myminio/gleanerbucket;
      /usr/bin/mc anonymous set public myminio/gleanerbucket;
      sleep infinity;
       "
    networks:
      - dagster_network

  createrepositories:
    # Applies migrations aka "repositories" after the database is created
    image: alpine/curl
    depends_on:
      - graphdb
    # Apply the local config files into the graphdb. We sleep 5 since even after the service is up, the graphdb is not fully ready
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      curl -X POST http://graphdb:7200/rest/repositories -H 'Content-Type: multipart/form-data' -F 'config=@templates/iow-config.ttl'; 
      curl -X POST http://graphdb:7200/rest/repositories -H 'Content-Type: multipart/form-data' -F 'config=@templates/iowprov-config.ttl'; 
      sleep infinity"
    volumes:
      - ./templates:/templates
    networks:
      - dagster_network

  graphdb:
    image: khaller/graphdb-free
    container_name: graphdb
    ports:
      - 7200:7200
    environment:
      - JAVA_XMX=4g
      - JAVA_XMS=2048m
    volumes:
      - graphdb_data:/opt/graphdb/data
    networks:
      - headless_gleanerio
      - dagster_network

networks:
  dagster_network:
    external: true
  headless_gleanerio:
    name: headless_gleanerio
    external: true

# Used for persistence
volumes:
  scheduler_minio_data:
  graphdb_data:
