# Copyright 2025 Lincoln Institute of Land Policy
# SPDX-License-Identifier: Apache-2.0

name: geoconnex_scheduler

services:
  scheduler_shacl_validator:
    container_name: scheduler_shacl_validator
    image: internetofwater/shacl_validator_grpc_py:latest
    command: ["serve"]
    ports:
      - "50051:50051"
    networks:
      - dagster_network

  # MinIO service for storage
  minio:
    container_name: scheduler_minio
    image: minio/minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - scheduler_minio_data:/data
    env_file:
      - "../.env"
    networks:
      - dagster_network
    profiles:
      - localInfra

  # GraphDB service for storage
  graphdb:
    container_name: scheduler_graphdb
    build:
      context: ./graphdb
    ports:
      - "7200:7200"
    environment:
      - JAVA_XMX=8g
      - JAVA_XMS=4g
    networks:
      - dagster_network
    volumes:
      - graphdb_data:/opt/graphdb/data
    profiles:
      - localInfra

  # PostgreSQL database for Dagster
  dagster_postgres:
    image: postgres:11
    container_name: dagster_postgres
    volumes:
      - dagster_postgres_data:/var/lib/postgresql/data
    env_file:
      - "../.env"
    ports:
      - "5432:5432"
    expose:
      - 5432
    networks:
      - dagster_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres_db"]
      interval: 10s
      timeout: 8s
      retries: 5
    profiles:
      - localInfra

  # Dagster Webserver
  dagster_webserver:
    container_name: dagster_webserver
    build:
      context: ..
      dockerfile: ./Docker/dagster/Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - "workspace.yaml"
    ports:
      - "3000:3000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    depends_on:
      dagster_user_code:
        condition: service_started
    env_file:
      - "../.env"
    networks:
      - dagster_network
    profiles:
      - production

  # Dagster Daemon
  dagster_daemon:
    container_name: dagster_daemon
    build:
      context: ..
      dockerfile: ./Docker/dagster/Dockerfile_dagster
    restart: on-failure
    entrypoint:
      - dagster-daemon
      - run
    volumes:
      # we mount the docker sock to allow us to spawn nabu / gleaner containers
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    depends_on:
      dagster_user_code:
        condition: service_started
    env_file:
      - "../.env"
    networks:
      - dagster_network
    profiles:
      - production

  # Dagster User Code
  dagster_user_code:
    container_name: dagster_user_code
    build:
      context: ..
      dockerfile: ./Docker/dagster/Dockerfile_user_code
    restart: always
    networks:
      - dagster_network
    environment:
      - DAGSTER_CURRENT_IMAGE=dagster_user_code_image
      - NABU_IMAGE=${NABU_IMAGE:-internetofwater/nabu:latest}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # we mount the temp dir to allow us to access the nabu / gleaner configs from host
      # since the docker socket mounts volumes relative to the host
      - /tmp/geoconnex/:/tmp/geoconnex/
    env_file:
      - "../.env"
    profiles:
      - production

  # Headless browser for testing
  scheduler_headless:
    image: chromedp/headless-shell:latest
    container_name: scheduler_headless
    ports:
      - "9222:9222"
    networks:
      - dagster_network
    environment:
      - SERVICE_PORTS=9222
    profiles:
      - production

volumes:
  scheduler_minio_data:
  graphdb_data:
  dagster_postgres_data:

networks:
  dagster_network:
    driver: bridge
    name: dagster_network
