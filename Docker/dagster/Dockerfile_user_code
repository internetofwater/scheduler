# Copyright 2025 Lincoln Institute of Land Policy
# SPDX-License-Identifier: Apache-2.0

# Based on: https://github.com/astral-sh/uv-docker-example/blob/main/multistage.Dockerfile

# First, build the application in the `/app` directory.
FROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim AS builder
ENV UV_COMPILE_BYTECODE=1 UV_LINK_MODE=copy

# Disable Python downloads, because we want to use the system interpreter
# across both images. If using a managed Python version, it needs to be
# copied from the build image into the final image; see `standalone.Dockerfile`
# for an example.
ENV UV_PYTHON_DOWNLOADS=0

WORKDIR /app
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev
ADD . /app
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen --no-dev


# Then, use a final image without uv
FROM python:3.12-slim-bookworm
# It is important to use the image that matches the builder, as the path to the
# Python executable must be the same.

# Copy the application from the builder
COPY --from=builder /app /app

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"

WORKDIR /opt/dagster/app
COPY userCode/ /opt/dagster/app/userCode
COPY dagster.yaml /opt/dagster/app/

# Expose the necessary ports
EXPOSE 4000
# Set the home variable so the code locations are loaded properly
ENV DAGSTER_HOME=/opt/dagster/app

COPY ./Docker/dagster/entrypoint.sh /opt/dagster/app/entrypoint.sh

# This needs to be a CMD and not an ENTRYPOINT for some reason; it appears that docker swarm might pass implicit arguments and thus not work if it is an ENTRYPOINT
CMD [ "/opt/dagster/app/entrypoint.sh" ]
